diff -wur a/eigen3/Eigen/src/SparseCore/SparseMatrix.h b/eigen3/Eigen/src/SparseCore/SparseMatrix.h
--- a/eigen3/Eigen/src/SparseCore/SparseMatrix.h	2015-12-16 21:48:48.000000000 +0100
+++ b/eigen3/Eigen/src/SparseCore/SparseMatrix.h	2017-05-18 16:33:54.000000000 +0200
@@ -116,6 +116,28 @@
 
     typedef typename Base::IndexVector IndexVector;
     typedef typename Base::ScalarVector ScalarVector;
+
+    size_t n_rows, n_cols;
+
+    inline void zeros(const size_t rows, const size_t cols)
+    {
+      resize(rows, cols);
+      n_rows = rows;
+      n_cols = cols;
+      setZero();
+    }
+
+    inline double& operator()(const size_t row, const size_t col)
+    {
+      return coeffRef(row, col);
+    }
+
+    inline double operator()(const size_t row, const size_t col) const
+    {
+      return coeff(row, col);
+    }
+
+
   protected:
     typedef SparseMatrix<Scalar,(Flags&~RowMajorBit)|(IsRowMajor?RowMajorBit:0)> TransposedSparseMatrix;

@@ -587,7 +609,11 @@
 
       // Re-allocate outer index structure if necessary
       if (outerChange == 0)
+      {
+        n_cols = this->cols();
+        n_rows = this->rows();
         return;
+      }
           
       StorageIndex *newOuterIndex = static_cast<StorageIndex*>(std::realloc(m_outerIndex, (m_outerSize + outerChange + 1) * sizeof(StorageIndex)));
       if (!newOuterIndex) internal::throw_std_bad_alloc();
@@ -599,6 +625,8 @@
           m_outerIndex[i] = last; 
       }
       m_outerSize += outerChange;
+      n_cols = this->cols();
+      n_rows = this->rows();
     }
     
     /** Resizes the matrix to a \a rows x \a cols matrix and initializes it to zero.
@@ -627,6 +655,8 @@
         m_innerNonZeros = 0;
       }
       memset(m_outerIndex, 0, (m_outerSize+1)*sizeof(StorageIndex));
+      n_rows = rows;
+      n_cols = cols;
     }
 
     /** \internal
@@ -651,6 +681,8 @@
     {
       check_template_parameters();
       resize(0, 0);
+      n_cols = 0;
+      n_rows = 0;
     }
 
     /** Constructs a \a rows \c x \a cols empty matrix */
@@ -659,6 +691,8 @@
     {
       check_template_parameters();
       resize(rows, cols);
+      n_cols = cols;
+      n_rows = rows;
     }
 
     /** Constructs a sparse matrix from the sparse expression \a other */
@@ -679,6 +713,8 @@
         #endif
         internal::call_assignment_no_alias(*this, other.derived());
       }
+      n_rows = rows();
+      n_cols = cols();
     }
     
     /** Constructs a sparse matrix from the sparse selfadjoint view \a other */
@@ -688,6 +724,8 @@
     {
       check_template_parameters();
       Base::operator=(other);
+      n_rows = rows();
+      n_cols = cols();
     }
 
     /** Copy constructor (it performs a deep copy) */
@@ -696,6 +734,8 @@
     {
       check_template_parameters();
       *this = other.derived();
+      n_rows = rows();
+      n_cols = cols();
     }
 
     /** \brief Copy constructor with in-place evaluation */
@@ -706,6 +746,8 @@
       check_template_parameters();
       initAssignment(other);
       other.evalTo(*this);
+      n_cols = cols();
+      n_rows = rows();
     }

     /** \brief Copy constructor with in-place evaluation */
@@ -727,6 +769,9 @@
       std::swap(m_outerSize, other.m_outerSize);
       std::swap(m_innerNonZeros, other.m_innerNonZeros);
       m_data.swap(other.m_data);
+
+      std::swap(n_rows, other.n_rows);
+      std::swap(n_cols, other.n_cols);
     }
 
     /** Sets *this to the identity matrix.
@@ -763,6 +808,8 @@
           Base::operator=(other);
         }
       }
+      n_rows = this->rows();
+      n_cols = this->cols();
       return *this;
     }
 
